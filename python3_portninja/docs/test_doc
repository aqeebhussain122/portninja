===================================================================================
DATE: 08/10/2018

GOOD POINTS:
Program is able to banner grab successfully and declare 
if a port is open or closed

THINGS TO IMPROVE:
Does not work with other computers too well
Crashes if a service is not available
Since TCP has a standard type of blocking socket
it awaits activity, in some cases it will not recieve it at all
In that case it waits (NOT GOOD)

TEST PLAN #1

NMAP scan of local machine
22/tcp   open  ssh
53/tcp   open  domain
80/tcp   open  http
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
631/tcp  open  ipp
3306/tcp open  mysql
8080/tcp open  http-proxy

test of ssh - 22
IP Address is: 127.0.0.1
Port 22 open
Banner is SSH-2.0-OpenSSH_7.6p1 Ubuntu-4

Test of DNS - 53
IP Address is: 127.0.0.1
Port 53 open
(stuck) No action

Addition to code with sockettimeout function causes following result
--------------------------------------
IP Address is: 127.0.0.1
Port 53 open
('Exception', timeout('timed out',))
---------------------------------------
(After 5 seconds of wait)
==========================================================================================================================================================
DATE: 27/11/2018

Good points:
Scans on other machines are successful
If a service is not available the system will timeout in 5 secs
Banners are retrieved from all TCP services

Bad points:
Ports scans cannot perform banner grabs on UDP ports
Does not work well with Windows as of this moment


Test Plan #1

NMAP Ports available on machine:
135/tcp  open  msrpc - 
139/tcp  open  netbios-ssn
445/tcp  open  microsoft-ds
2701/tcp open  sms-rcinfo
3000/tcp open  ppp
8192/tcp open  sophos
8194/tcp open  sophos


Results:
Port 135 open
('Exception', timeout('timed out',))

Port 139 open
Banner is �� - Obfuscated banner

Port 445 open 
('Exception', error(104, 'Connection reset by peer'))

Port 2701 open
Banner is (SUCCESSFULLY SHOWN)

Port 3000 open
Banner not showing up :(

Port 8192 open
Banner is (SUCCESSFULLY SHOWN)

NOTE: To maintain security of the machines used, I have chosen not to reveal the banners
============================================================================================
Date: 16/01/2019

Test of main.py improved version in test_code directory

Good points:
Banners can be retrieved successfully from machines of different types
SYN Flood component available which crafts a number of packets to attack a target
Argparse implementation

Bad points:
Packet crafting options are limited

Test #1: input: python main.py
output: Standard error
Traceback (most recent call last):
  File "main.py", line 124, in <module>
    main()
  File "main.py", line 88, in main
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
  File "/usr/lib/python2.7/socket.py", line 191, in __init__
    _sock = _realsocket(family, type, proto)
socket.error: [Errno 1] Operation not permitted
Ensure to root or sudo to gain the permission needed
(Add exception using try, catch and look for function which checks for root or admin privileges)

Test #2: sudo python main.py SRC_IP_address 
usage: main.py [-h] [-f FLOOD] sip dip sport dport
main.py: error: too few arguments

Correct test to show that argparse works

Test #3: sudo python main.py x.x.x.x x.x.w.x 222 3
Added the letter to trigger error message 


Traceback (most recent call last):
  File "main.py", line 124, in <module>
    main()
  File "main.py", line 98, in main
    ip_header = syn_flood.ipCreate(args.sip, args.dip)
  File "syn_flood.py", line 48, in ipCreate
    daddr = socket.inet_aton(dest_ip)
socket.error: illegal IP address string passed to inet_aton

(Add custom exception to avoid python from giving default errors to support user friendliness)

Test #4: sudo python main.py src_ip dst_ip a s
usage: main.py [-h] [-f FLOOD] sip dip sport dport
main.py: error: argument sport: invalid int value: 'a'

No changes needed because argparse handles it

Test #5: sudo python main.py bogus_source_ip bogus_dest_ip source_port dest_port
Program crash unless keyboard is used to interrupt

Test #6: sudo python main.py x.x.x.x x.x.x.x xxx xxx
Real details used for test #6 which produced legitimate output - Details have been blanked for the purpose of avoiding conflict

Flood option was not chosen, sending 1 SYN packet...
IP Address is: x.x.x.x
Port xx open
Protocol mismatch.

No choice provided for the packet injection, it happens regardless either a choice to flood or not


Test #7: sudo python main.py 10.0.2.13 10.0.2.11 22222222 2222222 
Out of bounds testing resulted in the following error:
sudo python main.py 10.0.2.13 10.0.2.11 22222222 2222222
Traceback (most recent call last):
  File "main.py", line 124, in <module>
    main()
  File "main.py", line 99, in main
    tcp_header = syn_flood.tcpCreate(args.sip, args.dip, args.sport, args.dport)
  File "main.py", line 83, in tcpCreate
    tcp_header = pack('!HHLLBBHHH', source_port, dest_port, seq, ack_seq, offset_res, tcp_flags, window, check, urg_ptr)
struct.error: 'H' format requires 0 <= number <= 65535

Exceptions to be added to increase clear verbosity
===================================================================

18/01/2019

Code has all been reformatted to python3 and added to new directory test results of
code from test directory below:

main.py: 

TEST #1: 

sudo python3 syn_flood.py 10.0.2.13 10.0.2.11 2212 22
Logged in user is 0	
Traceback (most recent call last):
  File "syn_flood.py", line 138, in <module>
    main()
  File "syn_flood.py", line 123, in main
    tcp_header = tcpCreate(args.sip, args.dip, args.sport, args.dport)
  File "syn_flood.py", line 95, in tcpCreate
    tcp_checksum = checksum(psh)
  File "syn_flood.py", line 23, in checksum
    w = (ord(msg[i]) << 8) + (ord(msg[i+1]))
TypeError: ord() expected string of length 1, but int found

Fixes applied by removing ord function from checksum function and trying to perform
bit shifting on the length of the message rather than the internal contents which
kicks up an error of str
