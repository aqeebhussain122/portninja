Layout of Program: 
• An attacker uses command execution from the target box to execute the client payload. 
• The client payload connect to a malicious server on port x.
• The attacking server listens on port x for the clients connection, once recieved the connection is bound and occupies port x. 
• The attacking server establishes and maintains that connection by creating a socket, binding to a port and listening for a connection to come through. 
• Commands are transmit from server to client over the wire by encoded bytes. Once recieved on client-side, they are decoded to data-type string. 
• The client payload listens for the server commands and executes them in string format using a while loop with hardcoded commands and their functionality. It does so using its own subprocess.



TLDR: Sever & Client maintain a connection, server sends requests, client executes requests with hardcoded functionality within its local payload.
=================================================================================================================================================================================
What else do we need to do:

- full pty capabilites - 
- shell encryption -
- testing
=================================================================================================================================================================================

Full PTY capabilites (cop):
• usage
• commands and their functionality
• error handling
• subprocess

GOAL: Understand the inner workings of a shell.
========================================================
Usage:

- cntl+c to exit 
- cntrl+r to see previous commands?!?


========================================================
Commands + their functionality:

lets use a template as we'll be building so many commands:
Temp template pseudo code:

  if command = ...
     os.chdir(command[...])
     execute
     print results
	
========================================================
Error handling:

• timeout function() - If the host is suddenly dead then just pull out OR AFK for a certain amount of time
• try and catch statments.
• print errors back to us?


========================================================
SubProcess Section:

So to create our own sub process we need to build our own package of commands.
Pre-built bash shell everyone uses (naw)

...


========================================================
Extra:

--------------------------
Each time an command is input the client payload will scan over every hardcoded if statement. This may be a better way to do it but idk:

array_commands[cd, ls, ..., ...,]
if argv1 = array_commands SUCCESS
else exit()

----------------------------

=================================================================================================================================================================================
Shell encryption: 

- Future thing
- use SIM (steal insult modify) 
- 









=================================================================================================================================================================================
Testing zone:
...
...
...



=================================================================================================================================================================================
2 steps:
1) Find a shell we want (bash?)

2) Developing our encryption:
     what encryption standard are we using?
	AES 256 bit encryption
	build a encryptor and decryptor
	incoperate into a network socot
	RESEARCH BABY
	
	data over the wire should be fully encrypted, 
	to decrypt use an obsucre number of keys? (nah vuln)
 	encryption doesn't get picked up on as most traffic on a valued target is encrypted
	hide in plain sight (military style)
	mask on a dns server?? - potential idea to add-on
	
	start off by building and viewing normal/simple encryption and decryption programs
	encryporate it correctly so 3rd party can't view but we can.
	build a PoC understand how encrypt and decrypt happens
	then put it into our network program
	
Our network program should send encrypted data just like this rather than plain text. We don't want to leave any traces of ourselves:
14:57:30.371656 IP (tos 0x0, ttl 64, id 41713, offset 0, flags [DF], proto TCP (6), length 128)
    kali-linux-main.2222 > 192.168.0.104.49316: Flags [P.], cksum 0x8291 (incorrect -> 0x83a3), seq 32:108, ack 36, win 506, options [nop,nop,TS val 350060453 ecr 4294922070], length 76
    0x0000:  000c 29a7 4598 000c 29dd 00df 0800 4500  ..).E...).....E.
    0x0010:  0080 a2f1 4000 4006 1568 c0a8 0066 c0a8  ....@.@..h...f..
    0x0020:  0068 08ae c0a4 f439 13ed 45b1 3a0d 8018  .h.....9..E.:...
    0x0030:  01fa 8291 0000 0101 080a 14dd 7fa5 ffff  ................
    0x0040:  4f56 1703 0300 47e4 d764 5e5c e038 fabc  OV....G..d^.8..
    0x0050:  b06f 9d12 6c79 a7fe 9851 926e fa76 07c9  .o..ly...Q.n.v..
    0x0060:  9950 9e81 4080 6501 636e 8e19 11c0 ec32  .P..@.e.cn.....2
    0x0070:  0f4e 613c 110b 56ae febd f4aa ac24 f6c0  .Na<..V......$..
    0x0080:  bfd2 0ecb 8fe9 3c45 c105 5ab0 461f       ......<E..Z.F.


=================================================================================================================================================================================
=================================================================================================================================================================================
Old:
Create a reliable network program to send data between a network sender and listener (reverse shell)

Create a network Socket 
  •
  •
  •
Create our own Shell (C programming job and will serve as part of the payload being sent over the wire)
  •
  •
  •
Create a client Payload
  •
  •
  •
Create a python server to which the target connects to via command injection (Command & Control) 
  • create() - Create the socket
  • bind() - Bind the socket to a port 
  • accept() - Accept a connection which comes in and create a blocking state
  • send_commands() - Send commands to the recieved payload with encoding
  • receive_commands() - Print and receive the appropriate decoded output for us to interact with the target. 
  
Client-Sever:
  Description:
    Attacker: Netcat connection (Socket open on port) <- That socket then catches a known payload such as Python, perl or whatever to open bin/sh or bin/bash
    Our case: We create a server in which we handle sockets, create, bind, accept sockets then we send/receive commands back & forth to our target via reverse shell mechanism.
    
    
  • Currently building both the client functionality & the python sever - (Reference & base code) -  https://www.thepythoncode.com/code/create-reverse-shell-python
  • Most of the PoC done, once error handling is complete.
  • Subprocess work to do.
============================================================================================================================
Older:
  
Create a network socket.
---------
Function to print errors from processers
'buffer' = amount of characters read from the socket
---------
We create the server and client address using a struct known as sockaddr_in
---------
'htons' - thin layer between the code and how its interpreted in memory (network byte order)
  how the binary and the machine interprets the port number.
  converts a port number in host byte order to a port number in network byte order.
---------
memset is libary to initilize memory from a start point to an endpoint for the data to populated
bzero adds 0's into sections of memory
  First zero out an entire memory space from point a to b. Then we initialize our own variables into it.
---------
Next stage:
Make our own reliable network program to send data between a network sender and listener. reverse shell
---------
Extra:
"A socket is an abstraction of a communication endpoint"
file descriptors as we are essential accessing a file.
============================================================================================================================


